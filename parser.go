// Code generated by goyacc -o parser.go parser.y. DO NOT EDIT.

//line parser.y:2
package main

import __yyfmt__ "fmt"

//line parser.y:2

//line parser.y:5
type yySymType struct {
	yys int
	I   int
	S   string
	F   float64
	B   bool
}

const BRK = 57346
const NXT = 57347
const ELSE = 57348
const FOR = 57349
const IF = 57350
const RET = 57351
const ETERN = 57352
const FN = 57353
const CONSTRUCT = 57354
const CHR = 57355
const INT16 = 57356
const INT32 = 57357
const INT64 = 57358
const FLOAT32 = 57359
const FLOAT64 = 57360
const BOOL = 57361
const STR = 57362
const IDENT = 57363
const CLASS = 57364
const CHRLIT = 57365
const INT16LIT = 57366
const INT32LIT = 57367
const INT64LIT = 57368
const FLOAT32LIT = 57369
const FLOAT64LIT = 57370
const STRLIT = 57371
const BOOLLIT = 57372
const NULLVAL = 57373
const LT = 57374
const GT = 57375
const LTE = 57376
const GTE = 57377
const EQ = 57378
const NE = 57379
const AND = 57380
const OR = 57381
const NOT = 57382
const INCR = 57383
const DECR = 57384
const SCOLON = 57385
const COMMA = 57386
const DOT = 57387
const LPAREN = 57388
const RPAREN = 57389
const LSBRACKET = 57390
const RSBRACKET = 57391
const LBRACE = 57392
const RBRACE = 57393
const MIN = 57394
const PLUS = 57395
const DIV = 57396
const REM = 57397
const MUL = 57398
const ASSIGN = 57399
const FASSIGN = 57400

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"BRK",
	"NXT",
	"ELSE",
	"FOR",
	"IF",
	"RET",
	"ETERN",
	"FN",
	"CONSTRUCT",
	"CHR",
	"INT16",
	"INT32",
	"INT64",
	"FLOAT32",
	"FLOAT64",
	"BOOL",
	"STR",
	"IDENT",
	"CLASS",
	"CHRLIT",
	"INT16LIT",
	"INT32LIT",
	"INT64LIT",
	"FLOAT32LIT",
	"FLOAT64LIT",
	"STRLIT",
	"BOOLLIT",
	"NULLVAL",
	"LT",
	"GT",
	"LTE",
	"GTE",
	"EQ",
	"NE",
	"AND",
	"OR",
	"NOT",
	"INCR",
	"DECR",
	"SCOLON",
	"COMMA",
	"DOT",
	"LPAREN",
	"RPAREN",
	"LSBRACKET",
	"RSBRACKET",
	"LBRACE",
	"RBRACE",
	"MIN",
	"PLUS",
	"DIV",
	"REM",
	"MUL",
	"ASSIGN",
	"FASSIGN",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 21,
	45, 98,
	-2, 72,
	-1, 23,
	41, 30,
	42, 30,
	45, 30,
	46, 30,
	50, 30,
	57, 30,
	58, 30,
	-2, 35,
	-1, 27,
	41, 139,
	42, 139,
	57, 139,
	58, 139,
	-2, 97,
	-1, 73,
	41, 138,
	42, 138,
	57, 138,
	58, 138,
	-2, 113,
	-1, 169,
	45, 108,
	-2, 104,
}

const yyPrivate = 57344

const yyLast = 359

var yyAct = [...]uint8{
	73, 25, 8, 25, 89, 75, 26, 17, 26, 77,
	21, 167, 21, 112, 50, 165, 37, 121, 123, 70,
	20, 6, 20, 40, 19, 149, 4, 76, 155, 72,
	10, 74, 85, 53, 7, 71, 7, 13, 88, 25,
	78, 138, 139, 137, 26, 136, 135, 207, 21, 68,
	9, 61, 62, 14, 171, 25, 144, 50, 20, 38,
	26, 172, 114, 79, 21, 173, 107, 60, 63, 91,
	105, 109, 95, 118, 20, 58, 99, 215, 119, 209,
	116, 141, 141, 206, 124, 25, 18, 160, 202, 98,
	26, 201, 99, 113, 21, 38, 108, 27, 64, 131,
	50, 195, 169, 66, 20, 163, 42, 43, 44, 45,
	46, 47, 48, 49, 51, 91, 161, 145, 95, 126,
	150, 67, 99, 147, 190, 152, 187, 156, 141, 141,
	141, 141, 157, 141, 117, 98, 141, 141, 141, 141,
	141, 58, 168, 54, 140, 143, 18, 160, 52, 178,
	64, 65, 64, 164, 196, 66, 108, 170, 175, 204,
	179, 176, 177, 174, 189, 25, 191, 185, 193, 50,
	26, 186, 194, 162, 21, 156, 180, 181, 142, 142,
	157, 150, 188, 151, 20, 148, 154, 146, 192, 198,
	199, 200, 197, 106, 55, 127, 129, 130, 108, 128,
	125, 182, 183, 184, 120, 25, 203, 208, 205, 57,
	26, 214, 114, 39, 21, 168, 218, 216, 211, 14,
	219, 168, 220, 217, 20, 142, 142, 142, 142, 59,
	142, 133, 134, 142, 142, 142, 142, 142, 100, 102,
	24, 16, 103, 101, 51, 212, 69, 3, 132, 31,
	36, 32, 34, 33, 35, 23, 82, 29, 210, 110,
	31, 213, 32, 34, 33, 35, 51, 22, 97, 30,
	96, 31, 94, 32, 34, 33, 35, 90, 93, 92,
	30, 87, 86, 84, 38, 81, 83, 15, 16, 14,
	122, 30, 18, 159, 166, 56, 11, 80, 115, 28,
	158, 153, 23, 12, 104, 5, 2, 31, 1, 32,
	34, 33, 35, 42, 43, 44, 45, 46, 47, 48,
	49, 51, 111, 0, 0, 0, 0, 30, 0, 0,
	0, 0, 0, 23, 0, 0, 0, 0, 31, 0,
	32, 34, 33, 35, 41, 42, 43, 44, 45, 46,
	47, 48, 49, 51, 0, 0, 0, 0, 30,
}

var yyPact = [...]int16{
	281, -1000, 281, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 9, 192, 300, 102, 211, 97, 151, 188, 27,
	-1000, -1000, -1000, -1000, 10, 105, 76, -1000, -1000, -1000,
	245, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 234, 20,
	150, 177, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	107, -1000, 245, -1000, 312, -1000, 332, 88, 24, 245,
	-1000, -1000, -1000, -1000, 183, 245, 245, 179, 72, 156,
	-1000, 161, 160, 53, 199, 76, -7, -1000, -13, -1000,
	245, 245, -1000, 5, 234, -1000, -1000, -1000, 144, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 300,
	142, 245, 140, 79, -1000, 135, -1000, 27, -1000, 69,
	130, 58, 109, -1000, -1000, -1000, -1000, 177, -1000, -1000,
	-1000, 55, 113, -1000, 3, 15, -1000, 245, 245, 245,
	245, 245, 245, -1000, -1000, 245, 245, 245, 245, 245,
	-1000, 53, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 124,
	-1000, -1000, 245, 75, -1000, -1000, -1000, -1000, -1000, 9,
	78, 9, 245, 9, 223, 54, 110, -1000, 93, -1000,
	245, -1000, 245, 245, 161, 160, 199, 199, 44, -7,
	-13, -13, -1000, -1000, -1000, -1000, 41, -1000, -1000, -1000,
	177, -1000, 116, -1000, -1000, -1000, 177, -1000, -1000, 36,
	-4, -1000, 9, 32, 223, -1000, -1000, -1000, 239, -1000,
	30, 109, 45, 217, -1000, 9, -1000, 45, -1000, -1000,
	-1000,
}

var yyPgo = [...]int16{
	0, 308, 306, 247, 26, 305, 21, 33, 2, 50,
	30, 304, 301, 28, 300, 37, 23, 0, 299, 24,
	298, 296, 4, 295, 15, 294, 11, 293, 17, 290,
	286, 283, 32, 282, 281, 38, 279, 278, 272, 270,
	268, 7, 19, 9, 267, 18, 261, 259, 25, 258,
	13, 5, 257, 97, 256, 63, 40, 27, 248, 31,
	29, 35, 246, 240, 229,
}

var yyR1 = [...]int8{
	0, 1, 2, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 5, 11, 11, 12, 12, 13, 13, 13,
	6, 16, 16, 16, 16, 16, 16, 16, 16, 16,
	17, 17, 18, 15, 15, 19, 19, 20, 20, 4,
	21, 23, 24, 24, 25, 25, 26, 14, 27, 28,
	28, 22, 30, 30, 31, 31, 32, 32, 33, 35,
	34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
	10, 41, 41, 41, 7, 39, 40, 40, 46, 46,
	8, 9, 9, 47, 47, 47, 48, 48, 49, 49,
	50, 50, 36, 37, 38, 51, 51, 51, 51, 52,
	52, 52, 52, 52, 44, 29, 29, 53, 43, 43,
	43, 43, 54, 54, 55, 55, 55, 56, 56, 56,
	56, 57, 57, 57, 58, 58, 59, 59, 60, 60,
	60, 61, 61, 62, 62, 45, 45, 42, 63, 63,
	64, 64, 64, 64,
}

var yyR2 = [...]int8{
	0, 1, 1, 2, 0, 1, 1, 1, 1, 1,
	1, 1, 3, 3, 2, 1, 2, 1, 1, 1,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 1, 3, 1, 3, 1, 0, 2,
	3, 4, 1, 0, 1, 3, 2, 2, 4, 1,
	0, 3, 1, 0, 1, 2, 1, 1, 2, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 1, 1, 1, 5, 7, 6, 8, 1, 2,
	2, 9, 5, 1, 1, 0, 1, 0, 1, 0,
	1, 3, 2, 3, 2, 1, 3, 1, 1, 1,
	1, 1, 1, 1, 4, 1, 3, 3, 4, 4,
	6, 6, 1, 1, 2, 2, 1, 1, 3, 3,
	3, 1, 3, 3, 1, 1, 1, 3, 1, 3,
	3, 1, 3, 1, 3, 1, 1, 3, 1, 1,
	1, 1, 1, 1,
}

var yyChk = [...]int16{
	-1000, -1, -2, -3, -4, -5, -6, -7, -8, -9,
	-10, -21, 22, -15, 8, 6, 7, -41, 11, -19,
	-42, -43, -44, 21, -63, -17, -51, -53, -18, -52,
	46, 26, 28, 30, 29, 31, -3, -22, 50, 21,
	-16, 44, 13, 14, 15, 16, 17, 18, 19, 20,
	-17, 21, 46, -7, 46, 43, -23, 21, 48, -64,
	57, 41, 42, 58, 45, 46, 50, 45, -45, -62,
	-42, -61, -60, -17, -59, -51, -57, -43, -56, -55,
	52, 40, -54, -30, -31, -32, -33, -34, -35, -22,
	43, -10, -36, -37, -38, -7, -39, -40, -9, -15,
	4, 9, 5, 8, -11, 50, 43, -19, 21, -45,
	-47, 10, -50, -35, -41, -20, -16, 46, 49, -45,
	21, -28, -29, -45, -28, 21, 47, 39, 38, 36,
	37, 46, -58, 32, 33, 53, 52, 56, 54, 55,
	-55, -17, -53, -55, 51, -32, 43, -16, 43, -48,
	-45, 43, 46, -12, 51, -13, -6, -4, -14, -27,
	12, 47, 43, 47, 44, -24, -25, -26, -19, 47,
	44, 51, 46, 50, -61, -60, -59, -59, -28, -57,
	-56, -56, -55, -55, -55, 43, -45, 51, -13, -22,
	46, -22, -48, -22, -41, 47, 44, -16, -45, -28,
	-28, 47, 47, -24, 43, -26, 47, 51, -22, 47,
	-49, -50, 6, -46, -8, 47, -22, 6, -8, -22,
	-22,
}

var yyDef = [...]int16{
	4, -2, 1, 2, 5, 6, 7, 8, 9, 10,
	11, 0, 0, 0, 0, 0, 0, 0, 0, 33,
	71, -2, 73, -2, 0, 138, 0, -2, 31, 95,
	0, 99, 100, 101, 102, 103, 3, 39, 53, 0,
	0, 0, 21, 22, 23, 24, 25, 26, 27, 28,
	29, 30, 0, 80, 85, 70, 38, 0, 0, 0,
	140, 141, 142, 143, 0, 50, 50, 0, 0, 135,
	136, 133, 131, -2, 128, 112, 126, 98, 121, 117,
	0, 0, 116, 0, 52, 54, 56, 57, 0, 60,
	61, 62, 63, 64, 65, 66, 67, 68, 69, 0,
	0, 87, 0, 0, 12, 0, 20, 34, 35, 0,
	0, 0, 83, 84, 90, 40, 37, 43, 36, 137,
	32, 0, 49, 105, 0, 107, 96, 0, 0, 0,
	0, 50, 0, 124, 125, 0, 0, 0, 0, 0,
	114, 113, 97, 115, 51, 55, 58, 59, 92, 0,
	86, 94, 0, 0, 14, 15, 17, 18, 19, 0,
	0, 0, 87, 0, 0, 0, 42, 44, 0, -2,
	0, 109, 50, 50, 134, 132, 129, 130, 0, 127,
	122, 123, 118, 119, 120, 93, 0, 13, 16, 47,
	43, 74, 0, 82, 91, 41, 0, 46, 106, 0,
	0, 108, 0, 0, 89, 45, 110, 111, 74, 48,
	0, 88, 0, 76, 78, 0, 75, 0, 79, 81,
	77,
}

var yyTok1 = [...]int8{
	1,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 3
	yyErrorVerbose = true
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	}
	goto yystack /* stack new state and value */
}
