// Code generated by goyacc -o parser.go parser.y. DO NOT EDIT.

//line parser.y:2
package main

import __yyfmt__ "fmt"

//line parser.y:2

//line parser.y:5
type yySymType struct {
	yys int
	I   int
	S   string
	F   float64
	B   bool
}

const BRK = 57346
const ELSE = 57347
const FOR = 57348
const IF = 57349
const RET = 57350
const ETERN = 57351
const FN = 57352
const CONSTRUCT = 57353
const CHR = 57354
const INT16 = 57355
const INT32 = 57356
const INT64 = 57357
const FLOAT32 = 57358
const FLOAT64 = 57359
const BOOL = 57360
const STR = 57361
const IDENT = 57362
const CLASS = 57363
const CHRLIT = 57364
const INT16LIT = 57365
const INT32LIT = 57366
const INT64LIT = 57367
const FLOAT32LIT = 57368
const FLOAT64LIT = 57369
const STRLIT = 57370
const BOOLLIT = 57371
const NULLVAL = 57372
const LT = 57373
const GT = 57374
const LTE = 57375
const GTE = 57376
const EQ = 57377
const NE = 57378
const AND = 57379
const OR = 57380
const NOT = 57381
const INCR = 57382
const DECR = 57383
const SCOLON = 57384
const COMMA = 57385
const DOT = 57386
const LPAREN = 57387
const RPAREN = 57388
const LSBRACKET = 57389
const RSBRACKET = 57390
const LBRACE = 57391
const RBRACE = 57392
const MIN = 57393
const PLUS = 57394
const DIV = 57395
const REM = 57396
const MUL = 57397
const ASSIGN = 57398
const FASSIGN = 57399

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"BRK",
	"ELSE",
	"FOR",
	"IF",
	"RET",
	"ETERN",
	"FN",
	"CONSTRUCT",
	"CHR",
	"INT16",
	"INT32",
	"INT64",
	"FLOAT32",
	"FLOAT64",
	"BOOL",
	"STR",
	"IDENT",
	"CLASS",
	"CHRLIT",
	"INT16LIT",
	"INT32LIT",
	"INT64LIT",
	"FLOAT32LIT",
	"FLOAT64LIT",
	"STRLIT",
	"BOOLLIT",
	"NULLVAL",
	"LT",
	"GT",
	"LTE",
	"GTE",
	"EQ",
	"NE",
	"AND",
	"OR",
	"NOT",
	"INCR",
	"DECR",
	"SCOLON",
	"COMMA",
	"DOT",
	"LPAREN",
	"RPAREN",
	"LSBRACKET",
	"RSBRACKET",
	"LBRACE",
	"RBRACE",
	"MIN",
	"PLUS",
	"DIV",
	"REM",
	"MUL",
	"ASSIGN",
	"FASSIGN",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 21,
	44, 96,
	-2, 71,
	-1, 23,
	40, 30,
	41, 30,
	44, 30,
	45, 30,
	49, 30,
	56, 30,
	57, 30,
	-2, 35,
	-1, 27,
	40, 137,
	41, 137,
	56, 137,
	57, 137,
	-2, 95,
	-1, 73,
	40, 136,
	41, 136,
	56, 136,
	57, 136,
	-2, 111,
	-1, 165,
	44, 106,
	-2, 102,
}

const yyPrivate = 57344

const yyLast = 343

var yyAct = [...]uint8{
	73, 25, 8, 25, 109, 89, 19, 75, 26, 17,
	26, 40, 77, 21, 50, 21, 163, 37, 161, 70,
	20, 118, 20, 147, 152, 78, 76, 74, 6, 85,
	10, 72, 88, 9, 4, 71, 203, 53, 7, 25,
	7, 135, 136, 134, 133, 132, 26, 167, 105, 61,
	62, 21, 14, 141, 13, 25, 38, 50, 20, 168,
	79, 103, 26, 169, 111, 60, 63, 21, 113, 91,
	51, 120, 97, 115, 20, 31, 94, 32, 34, 33,
	35, 138, 138, 58, 211, 25, 205, 110, 121, 81,
	202, 187, 26, 98, 38, 30, 149, 21, 198, 50,
	27, 80, 68, 197, 20, 191, 18, 157, 165, 98,
	144, 158, 64, 128, 142, 91, 106, 66, 97, 123,
	114, 164, 94, 54, 107, 138, 138, 138, 138, 52,
	138, 116, 153, 138, 138, 138, 138, 138, 154, 98,
	160, 137, 140, 64, 65, 67, 184, 64, 66, 192,
	174, 166, 146, 200, 172, 173, 175, 171, 176, 177,
	170, 25, 186, 182, 188, 50, 181, 159, 26, 143,
	190, 104, 148, 21, 145, 185, 193, 55, 124, 153,
	20, 139, 139, 189, 125, 154, 126, 127, 130, 131,
	195, 196, 18, 157, 164, 178, 179, 180, 106, 164,
	122, 25, 106, 117, 204, 207, 199, 210, 26, 201,
	111, 57, 214, 21, 212, 39, 14, 215, 213, 216,
	20, 183, 208, 59, 24, 139, 139, 139, 139, 69,
	139, 148, 151, 139, 139, 139, 139, 139, 194, 99,
	129, 16, 101, 100, 42, 43, 44, 45, 46, 47,
	48, 49, 51, 3, 82, 23, 36, 29, 206, 108,
	31, 209, 32, 34, 33, 35, 15, 16, 14, 22,
	96, 18, 95, 93, 92, 87, 86, 90, 84, 58,
	30, 23, 12, 83, 38, 119, 31, 156, 32, 34,
	33, 35, 42, 43, 44, 45, 46, 47, 48, 49,
	51, 162, 51, 56, 11, 112, 30, 31, 23, 32,
	34, 33, 35, 31, 28, 32, 34, 33, 35, 155,
	150, 102, 5, 41, 2, 1, 0, 30, 0, 0,
	0, 0, 0, 30, 42, 43, 44, 45, 46, 47,
	48, 49, 51,
}

var yyPact = [...]int16{
	261, -1000, 261, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 7, 195, 280, 84, 209, 78, 135, 191, 36,
	-1000, -1000, -1000, -1000, 9, 99, 101, -1000, -1000, -1000,
	50, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 235, 12,
	129, 178, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	103, -1000, 50, -1000, 288, -1000, 322, 75, 25, 50,
	-1000, -1000, -1000, -1000, 183, 50, 50, 180, 73, 140,
	-1000, 147, 151, 68, 157, 101, -7, -1000, -12, -1000,
	50, 50, -1000, 3, 235, -1000, -1000, -1000, 127, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 280, 132,
	50, 51, -1000, 182, -1000, 36, -1000, 65, 125, 97,
	-1000, -1000, -1000, -1000, 178, -1000, -1000, -1000, 62, 108,
	-1000, -3, 14, -1000, 50, 50, 50, 50, 50, 50,
	-1000, -1000, 50, 50, 50, 50, 50, -1000, 68, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 124, 121, -1000, 50,
	96, -1000, -1000, -1000, -1000, -1000, 7, 46, 7, 50,
	282, 59, 106, -1000, 232, -1000, 50, -1000, 50, 50,
	147, 151, 157, 157, 57, -7, -12, -12, -1000, -1000,
	-1000, -1000, -1000, 52, -1000, -1000, -1000, 178, -1000, 111,
	-1000, -1000, 178, -1000, -1000, 44, -14, -1000, 7, 40,
	282, -1000, -1000, -1000, 217, -1000, 38, 97, 45, 213,
	-1000, 7, -1000, 45, -1000, -1000, -1000,
}

var yyPgo = [...]int16{
	0, 325, 324, 253, 34, 322, 28, 37, 2, 33,
	30, 321, 320, 24, 319, 54, 11, 0, 314, 6,
	305, 304, 5, 303, 18, 301, 16, 287, 21, 285,
	283, 278, 29, 276, 275, 32, 274, 273, 272, 270,
	9, 19, 12, 269, 71, 261, 259, 23, 258, 4,
	7, 257, 100, 254, 60, 25, 26, 240, 27, 31,
	35, 229, 224, 223,
}

var yyR1 = [...]int8{
	0, 1, 2, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 5, 11, 11, 12, 12, 13, 13, 13,
	6, 16, 16, 16, 16, 16, 16, 16, 16, 16,
	17, 17, 18, 15, 15, 19, 19, 20, 20, 4,
	21, 23, 24, 24, 25, 25, 26, 14, 27, 28,
	28, 22, 30, 30, 31, 31, 32, 32, 33, 35,
	34, 34, 34, 34, 34, 34, 34, 34, 34, 10,
	40, 40, 40, 7, 38, 39, 39, 45, 45, 8,
	9, 46, 46, 46, 47, 47, 48, 48, 49, 49,
	36, 36, 37, 50, 50, 50, 50, 51, 51, 51,
	51, 51, 43, 29, 29, 52, 42, 42, 42, 42,
	53, 53, 54, 54, 54, 55, 55, 55, 55, 56,
	56, 56, 57, 57, 58, 58, 59, 59, 59, 60,
	60, 61, 61, 44, 44, 41, 62, 62, 63, 63,
	63, 63,
}

var yyR2 = [...]int8{
	0, 1, 1, 2, 0, 1, 1, 1, 1, 1,
	1, 1, 3, 3, 2, 1, 2, 1, 1, 1,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 1, 3, 1, 3, 1, 0, 2,
	3, 4, 1, 0, 1, 3, 2, 2, 4, 1,
	0, 3, 1, 0, 1, 2, 1, 1, 2, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	1, 1, 1, 5, 7, 6, 8, 1, 2, 2,
	9, 1, 1, 0, 1, 0, 1, 0, 1, 3,
	2, 3, 3, 1, 3, 1, 1, 1, 1, 1,
	1, 1, 4, 1, 3, 3, 4, 4, 6, 6,
	1, 1, 2, 2, 1, 1, 3, 3, 3, 1,
	3, 3, 1, 1, 1, 3, 1, 3, 3, 1,
	3, 1, 3, 1, 1, 3, 1, 1, 1, 1,
	1, 1,
}

var yyChk = [...]int16{
	-1000, -1, -2, -3, -4, -5, -6, -7, -8, -9,
	-10, -21, 21, -15, 7, 5, 6, -40, 10, -19,
	-41, -42, -43, 20, -62, -17, -50, -52, -18, -51,
	45, 25, 27, 29, 28, 30, -3, -22, 49, 20,
	-16, 43, 12, 13, 14, 15, 16, 17, 18, 19,
	-17, 20, 45, -7, 45, 42, -23, 20, 47, -63,
	56, 40, 41, 57, 44, 45, 49, 44, -44, -61,
	-41, -60, -59, -17, -58, -50, -56, -42, -55, -54,
	51, 39, -53, -30, -31, -32, -33, -34, -35, -22,
	42, -10, -36, -37, -7, -38, -39, -9, -15, 4,
	8, 7, -11, 49, 42, -19, 20, -44, -46, -49,
	-35, -40, -20, -16, 45, 48, -44, 20, -28, -29,
	-44, -28, 20, 46, 38, 37, 35, 36, 45, -57,
	31, 32, 52, 51, 55, 53, 54, -54, -17, -52,
	-54, 50, -32, 42, -16, 42, 20, -47, -44, 45,
	-12, 50, -13, -6, -4, -14, -27, 11, 46, 42,
	43, -24, -25, -26, -19, 46, 43, 50, 45, 49,
	-60, -59, -58, -58, -28, -56, -55, -55, -54, -54,
	-54, 42, 42, -44, 50, -13, -22, 45, -22, -47,
	-40, 46, 43, -16, -44, -28, -28, 46, 46, -24,
	42, -26, 46, 50, -22, 46, -48, -49, 5, -45,
	-8, 46, -22, 5, -8, -22, -22,
}

var yyDef = [...]int16{
	4, -2, 1, 2, 5, 6, 7, 8, 9, 10,
	11, 0, 0, 0, 0, 0, 0, 0, 0, 33,
	70, -2, 72, -2, 0, 136, 0, -2, 31, 93,
	0, 97, 98, 99, 100, 101, 3, 39, 53, 0,
	0, 0, 21, 22, 23, 24, 25, 26, 27, 28,
	29, 30, 0, 79, 83, 69, 38, 0, 0, 0,
	138, 139, 140, 141, 0, 50, 50, 0, 0, 133,
	134, 131, 129, -2, 126, 110, 124, 96, 119, 115,
	0, 0, 114, 0, 52, 54, 56, 57, 0, 60,
	61, 62, 63, 64, 65, 66, 67, 68, 0, 0,
	85, 0, 12, 0, 20, 34, 35, 0, 0, 81,
	82, 88, 40, 37, 43, 36, 135, 32, 0, 49,
	103, 0, 105, 94, 0, 0, 0, 0, 50, 0,
	122, 123, 0, 0, 0, 0, 0, 112, 111, 95,
	113, 51, 55, 58, 59, 90, 0, 0, 84, 0,
	0, 14, 15, 17, 18, 19, 0, 0, 0, 85,
	0, 0, 42, 44, 0, -2, 0, 107, 50, 50,
	132, 130, 127, 128, 0, 125, 120, 121, 116, 117,
	118, 91, 92, 0, 13, 16, 47, 43, 73, 0,
	89, 41, 0, 46, 104, 0, 0, 106, 0, 0,
	87, 45, 108, 109, 73, 48, 0, 86, 0, 75,
	77, 0, 74, 0, 78, 80, 76,
}

var yyTok1 = [...]int8{
	1,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 5
	yyErrorVerbose = true
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	}
	goto yystack /* stack new state and value */
}
